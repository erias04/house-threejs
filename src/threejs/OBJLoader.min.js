import{BufferGeometry,FileLoader,Float32BufferAttribute,Group,LineBasicMaterial,LineSegments,Loader,Material,Mesh,MeshPhongMaterial,Points,PointsMaterial,Vector3}from"./three.module.min.js";const _object_pattern=/^[og]\s*(.+)?/,_material_library_pattern=/^mtllib /,_material_use_pattern=/^usemtl /,_map_use_pattern=/^usemap /,_vA=new Vector3,_vB=new Vector3,_vC=new Vector3,_ab=new Vector3,_cb=new Vector3;function ParserState(){const t={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);const s=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],colors:[],uvs:[],hasUVIndices:!1},materials:[],smooth:!0,startMaterial:function(t,e){const s=this._finalize(!1);s&&(s.inherited||s.groupCount<=0)&&this.materials.splice(s.index,1);const i={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==s?s.smooth:this.smooth,groupStart:void 0!==s?s.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){const e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){const e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(let t=this.materials.length-1;t>=0;t--)this.materials[t].groupCount<=0&&this.materials.splice(t,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},s&&s.name&&"function"==typeof s.clone){const t=s.clone(0);t.inherited=!0,this.object.materials.push(t)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){const s=parseInt(t,10);return 3*(s>=0?s-1:s+e/3)},parseNormalIndex:function(t,e){const s=parseInt(t,10);return 3*(s>=0?s-1:s+e/3)},parseUVIndex:function(t,e){const s=parseInt(t,10);return 2*(s>=0?s-1:s+e/2)},addVertex:function(t,e,s){const i=this.vertices,o=this.object.geometry.vertices;o.push(i[t+0],i[t+1],i[t+2]),o.push(i[e+0],i[e+1],i[e+2]),o.push(i[s+0],i[s+1],i[s+2])},addVertexPoint:function(t){const e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addVertexLine:function(t){const e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addNormal:function(t,e,s){const i=this.normals,o=this.object.geometry.normals;o.push(i[t+0],i[t+1],i[t+2]),o.push(i[e+0],i[e+1],i[e+2]),o.push(i[s+0],i[s+1],i[s+2])},addFaceNormal:function(t,e,s){const i=this.vertices,o=this.object.geometry.normals;_vA.fromArray(i,t),_vB.fromArray(i,e),_vC.fromArray(i,s),_cb.subVectors(_vC,_vB),_ab.subVectors(_vA,_vB),_cb.cross(_ab),_cb.normalize(),o.push(_cb.x,_cb.y,_cb.z),o.push(_cb.x,_cb.y,_cb.z),o.push(_cb.x,_cb.y,_cb.z)},addColor:function(t,e,s){const i=this.colors,o=this.object.geometry.colors;void 0!==i[t]&&o.push(i[t+0],i[t+1],i[t+2]),void 0!==i[e]&&o.push(i[e+0],i[e+1],i[e+2]),void 0!==i[s]&&o.push(i[s+0],i[s+1],i[s+2])},addUV:function(t,e,s){const i=this.uvs,o=this.object.geometry.uvs;o.push(i[t+0],i[t+1]),o.push(i[e+0],i[e+1]),o.push(i[s+0],i[s+1])},addDefaultUV:function(){const t=this.object.geometry.uvs;t.push(0,0),t.push(0,0),t.push(0,0)},addUVLine:function(t){const e=this.uvs;this.object.geometry.uvs.push(e[t+0],e[t+1])},addFace:function(t,e,s,i,o,r,n,a,l){const c=this.vertices.length;let h=this.parseVertexIndex(t,c),u=this.parseVertexIndex(e,c),p=this.parseVertexIndex(s,c);if(this.addVertex(h,u,p),this.addColor(h,u,p),void 0!==n&&""!==n){const t=this.normals.length;h=this.parseNormalIndex(n,t),u=this.parseNormalIndex(a,t),p=this.parseNormalIndex(l,t),this.addNormal(h,u,p)}else this.addFaceNormal(h,u,p);if(void 0!==i&&""!==i){const t=this.uvs.length;h=this.parseUVIndex(i,t),u=this.parseUVIndex(o,t),p=this.parseUVIndex(r,t),this.addUV(h,u,p),this.object.geometry.hasUVIndices=!0}else this.addDefaultUV()},addPointGeometry:function(t){this.object.geometry.type="Points";const e=this.vertices.length;for(let s=0,i=t.length;s<i;s++){const i=this.parseVertexIndex(t[s],e);this.addVertexPoint(i),this.addColor(i)}},addLineGeometry:function(t,e){this.object.geometry.type="Line";const s=this.vertices.length,i=this.uvs.length;for(let e=0,i=t.length;e<i;e++)this.addVertexLine(this.parseVertexIndex(t[e],s));for(let t=0,s=e.length;t<s;t++)this.addUVLine(this.parseUVIndex(e[t],i))}};return t.startObject("",!1),t}class OBJLoader extends Loader{constructor(t){super(t),this.materials=null}load(t,e,s,i){const o=this,r=new FileLoader(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(t,function(s){try{e(o.parse(s))}catch(e){i?i(e):console.error(e),o.manager.itemError(t)}},s,i)}setMaterials(t){return this.materials=t,this}parse(t){const e=new ParserState;-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));const s=t.split("\n");let i="",o="",r=0,n=[];const a="function"==typeof"".trimLeft;for(let t=0,l=s.length;t<l;t++)if(i=s[t],0!==(r=(i=a?i.trimLeft():i.trim()).length)&&"#"!==(o=i.charAt(0)))if("v"===o){const t=i.split(/\s+/);switch(t[0]){case"v":e.vertices.push(parseFloat(t[1]),parseFloat(t[2]),parseFloat(t[3])),t.length>=7?e.colors.push(parseFloat(t[4]),parseFloat(t[5]),parseFloat(t[6])):e.colors.push(void 0,void 0,void 0);break;case"vn":e.normals.push(parseFloat(t[1]),parseFloat(t[2]),parseFloat(t[3]));break;case"vt":e.uvs.push(parseFloat(t[1]),parseFloat(t[2]))}}else if("f"===o){const t=i.substr(1).trim().split(/\s+/),s=[];for(let e=0,i=t.length;e<i;e++){const i=t[e];if(i.length>0){const t=i.split("/");s.push(t)}}const o=s[0];for(let t=1,i=s.length-1;t<i;t++){const i=s[t],r=s[t+1];e.addFace(o[0],i[0],r[0],o[1],i[1],r[1],o[2],i[2],r[2])}}else if("l"===o){const t=i.substring(1).trim().split(" ");let s=[];const o=[];if(-1===i.indexOf("/"))s=t;else for(let e=0,i=t.length;e<i;e++){const i=t[e].split("/");""!==i[0]&&s.push(i[0]),""!==i[1]&&o.push(i[1])}e.addLineGeometry(s,o)}else if("p"===o){const t=i.substr(1).trim().split(" ");e.addPointGeometry(t)}else if(null!==(n=_object_pattern.exec(i))){const t=(" "+n[0].substr(1).trim()).substr(1);e.startObject(t)}else if(_material_use_pattern.test(i))e.object.startMaterial(i.substring(7).trim(),e.materialLibraries);else if(_material_library_pattern.test(i))e.materialLibraries.push(i.substring(7).trim());else if(_map_use_pattern.test(i))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===o){if((n=i.split(" ")).length>1){const t=n[1].trim().toLowerCase();e.object.smooth="0"!==t&&"off"!==t}else e.object.smooth=!0;const t=e.object.currentMaterial();t&&(t.smooth=e.object.smooth)}else{if("\0"===i)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+i+'"')}e.finalize();const l=new Group;if(l.materialLibraries=[].concat(e.materialLibraries),!0===!(1===e.objects.length&&0===e.objects[0].geometry.vertices.length))for(let t=0,s=e.objects.length;t<s;t++){const s=e.objects[t],i=s.geometry,o=s.materials,r="Line"===i.type,n="Points"===i.type;let a=!1;if(0===i.vertices.length)continue;const c=new BufferGeometry;c.setAttribute("position",new Float32BufferAttribute(i.vertices,3)),i.normals.length>0&&c.setAttribute("normal",new Float32BufferAttribute(i.normals,3)),i.colors.length>0&&(a=!0,c.setAttribute("color",new Float32BufferAttribute(i.colors,3))),!0===i.hasUVIndices&&c.setAttribute("uv",new Float32BufferAttribute(i.uvs,2));const h=[];for(let t=0,s=o.length;t<s;t++){const s=o[t],i=s.name+"_"+s.smooth+"_"+a;let l=e.materials[i];if(null!==this.materials)if(l=this.materials.create(s.name),!r||!l||l instanceof LineBasicMaterial){if(n&&l&&!(l instanceof PointsMaterial)){const t=new PointsMaterial({size:10,sizeAttenuation:!1});Material.prototype.copy.call(t,l),t.color.copy(l.color),t.map=l.map,l=t}}else{const t=new LineBasicMaterial;Material.prototype.copy.call(t,l),t.color.copy(l.color),l=t}void 0===l&&((l=r?new LineBasicMaterial:n?new PointsMaterial({size:1,sizeAttenuation:!1}):new MeshPhongMaterial).name=s.name,l.flatShading=!s.smooth,l.vertexColors=a,e.materials[i]=l),h.push(l)}let u;if(h.length>1){for(let t=0,e=o.length;t<e;t++){const e=o[t];c.addGroup(e.groupStart,e.groupCount,t)}u=r?new LineSegments(c,h):n?new Points(c,h):new Mesh(c,h)}else u=r?new LineSegments(c,h[0]):n?new Points(c,h[0]):new Mesh(c,h[0]);u.name=s.name,l.add(u)}else if(e.vertices.length>0){const t=new PointsMaterial({size:1,sizeAttenuation:!1}),s=new BufferGeometry;s.setAttribute("position",new Float32BufferAttribute(e.vertices,3)),e.colors.length>0&&void 0!==e.colors[0]&&(s.setAttribute("color",new Float32BufferAttribute(e.colors,3)),t.vertexColors=!0);const i=new Points(s,t);l.add(i)}return l}}export{OBJLoader};